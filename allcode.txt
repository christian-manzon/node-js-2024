//connection
const mysql = require('mysql2');

const connection = mysql.createConnection({
  host: 'localhost',
  user: 'root', // replace with your MySQL username
  password: '', // replace with your MySQL password
  database: 'node_finals' // replace with your MySQL database name
});

connection.connect((err) => {
  if (err) {
    console.error('Error connecting to the database:', err);
    return;
  }
  console.log('Connected to the MySQL database.');
});

module.exports = connection;





//app js
const express = require('express');
const connection = require('./db/connection');
const path = require('path');

const app = express();
app.use(express.json());
app.use(express.urlencoded({ extended: true }));
app.use(express.static('public')); // Serve static files from the public directory

// Set view engine to EJS
app.set('view engine', 'ejs');
app.set('views', path.join(__dirname, 'views'));

app.get('/users/create', (req, res)=>{
  res.render('create');
})

// Create User
app.post('/users', (req, res) => {
  const { name, gender, bdate } = req.body;
  connection.query('INSERT INTO users (name, gender, bdate) VALUES (?, ?, ?)', [name, gender, bdate], (err) => {
    if (err) return res.status(500).send(err);
    res.redirect('/users');
  });
});

// Read Users
app.get('/users', (req, res) => {
  connection.query('SELECT id,name,gender, date_format(bdate, "%Y-%m-%d") as bdate FROM users', (err, results) => {
    if (err) return res.status(500).send(err);
    res.render('read', { users: results });
  });
});

// Update User Form
app.get('/users/update/:id', (req, res) => {
  const { id } = req.params;
  connection.query('SELECT id,name,gender,date_format(bdate, "%Y-%m-%d") as bdate FROM users WHERE id = ?', [id], (err, results) => {
    if (err) return res.status(500).send(err);
    if (results.length === 0) return res.status(404).send('User not found');
    res.render('update', { user: results[0] });
  });
});

// Update User
app.post('/users/:id', (req, res) => {
  const { id } = req.params;
  const { name, gender, bdate } = req.body;
  connection.query('UPDATE users SET name = ?, gender = ?, bdate = ? WHERE id = ?', [name, gender, bdate, id], (err) => {
    if (err) return res.status(500).send(err);
    res.redirect('/users');
  });
});

// Delete User
app.post('/users/delete/:id', (req, res) => {
  const { id } = req.params;
  connection.query('DELETE FROM users WHERE id = ?', [id], (err) => {
    if (err) return res.status(500).send(err);
    res.redirect('/users');
  });
});

// Start the server
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`Server is running on port ${PORT}`);
});



//main.js

function confirmDelete(userId) {
  if (confirm("Are you sure you want to delete this user?")) {
    axios
      .post(`/users/delete/${userId}`)
      .then(() => {
        window.location.href = "/users"; // Redirect to users list
      })
      .catch((err) => {
        console.error("Error deleting user:", err);
        alert("Failed to delete user.");
      });
  }
}

document.addEventListener("DOMContentLoaded", () => {
  const updateForm = document.getElementById("updateForm");
  const deleteForm = document.getElementById("deleteForm");

  // Update User
  if (updateForm) {
    updateForm.addEventListener("submit", async (e) => {
      e.preventDefault();
      const id = document.getElementById("updateId").value; // Corrected ID
      const name = document.getElementById("updateName").value;
      const gender = document.getElementById("updateGender").value;
      const bdate = document.getElementById("updateBdate").value;
      await axios.post(`/users/${id}`, { name, gender, bdate });
      window.location.href = "/users"; // Redirect to users list
    });
  }
});
















//views
//views
//views

//create

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Create User</title>
</head>
<body>
    <h1>Create User</h1>
    <form action="/users" method="POST">
        <input type="text" name="name" placeholder="Name" required>
        <input type="text" name="gender" placeholder="Gender" required>
        <input type="date" name="bdate" placeholder="Birth Date" required>
        <button type="submit">Create</button>
    </form>
    <a href="/users">View Users</a>
</body>
</html>



//read or index


<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Users List</title>
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <script src="/js/main.js"></script>
</head>
<body>
    <h1>Users List</h1>
    
    <table border="1" cellpadding="5" cellspacing="0">
    <thead>
        <tr>
            <th>ID</th>
            <th>Name</th>
            <th>Gender</th>
            <th>Birthdate</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        <% users.forEach(user => { %>
            <tr>
                <td><%= user.id %></td>
                <td><%= user.name %></td>
                <td><%= user.gender %></td>
                <td><%= user.bdate %></td>
                <td>
                    <button><a href="/users/update/<%= user.id %>">Update</a></button>
                    <button onclick="confirmDelete('<%= user.id %>')">Delete</button>
                </td>
            </tr>
        <% }) %>
    </tbody>
</table>

    <a href="/users/create">Create User</a>
</body>
</html>



//update


<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Update User</title>
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <script src="/js/main.js"></script>
</head>
<body>
    <h1>Update User</h1>
    <form id="updateForm" action="/users/<%= user.id %>" method="POST">
        <input type="hidden" id="updateId" value="<%= user.id %>">
        <input type="text" id="updateName" name="name" value="<%= user.name %>" required>
        <input type="text" id="updateGender" name="gender" value="<%= user.gender %>" required>
        <input type="date" id="updateBdate" name="bdate" value="<%= user.bdate %>" required>
        <button type="submit">Update</button>
    </form>
    <a href="/users">View Users</a>
</body>
</html>




